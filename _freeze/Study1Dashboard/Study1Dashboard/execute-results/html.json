{
  "hash": "0683b578ec688bcf0832e4207dd7035a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Interactive Dashboard: Exploring Insights  in Sociodemographic and Health Associations from the NHANES 2017–March 2020 Dataset\"\nauthor: \"Bosco Bakwatanisa\"\ndate: last-modified\nformat: \n  html:\n    fig-responsive: true\n    fig-align: center\n    fig-width: 8\n    fig-height: 8\n    page-layout: full\n    sidebar: true\n    theme: flatly\n    embed-resources: true\n    number_sections: true\n    date-format: iso\n    code-fold: false\n    toc: true\n    toc-depth: 3\nexecute:\n  echo: true\n  warning: false\n  message: false\neditor: visual\n---\n\n\n\n\n# NHANES Interactive Dashboard\n\nThis dashboard allows you to interactively explore insights from the NHANES 2017–March 2020 dataset. Use the sidebar controls to customize the analysis and visualize the results.\n\n------------------------------------------------------------------------\n\n## Sidebar Inputs\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(forcats)\nlibrary(boot)\nlibrary(ggplot2)\nlibrary(ggpubr)\nlibrary(kableExtra)\nlibrary(janitor)\nlibrary(naniar)\nlibrary(datawizard)\nlibrary(patchwork)\nlibrary(gridExtra)\nlibrary(broom.mixed)\nlibrary(Epi)\nlibrary(vcd)\nlibrary(xfun)\nlibrary(epitools)\n library(rsconnect)\nlibrary(tidyverse)\ntheme_set(theme_light())  \nknitr::opts_chunk$set(comment=NA)\n# Load the data\nanalysisA_data <- readRDS(\"data/AnalysisA.rds\")\nanalysisB_data <- readRDS(\"data/analysisB.rds\")\nanalysisD_data <- readRDS(\"data/analysisD.rds\")\nanalysisE_data <- readRDS(\"data/analysisE.rds\")\n\n# Define UI\nui <- fluidPage(\n  titlePanel(\"Interactive Data Analysis Dashboard\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"analysis_type\", \"Select Analysis Type:\",\n                  choices = list(\n                    \"Blood Pressure Analysis\" = \"bp_analysis\",\n                    \"BMI by Gender\" = \"bmi_gender\",\n                    \"Smoking vs Obesity\" = \"smoking_obesity\",\n                    \"Race vs Education\" = \"race_education\"\n                  )),\n      conditionalPanel(\n        condition = \"input.analysis_type == 'bmi_gender'\",\n        sliderInput(\"bmi_range\", \"Select BMI Range:\",\n                    min = 15, max = 50, value = c(20, 30))\n      ),\n      conditionalPanel(\n        condition = \"input.analysis_type == 'race_education'\",\n        selectInput(\"race_filter\", \"Filter by Race:\",\n                    choices = c(\"All\", unique(analysisE_data$Race)))\n      ),\n      conditionalPanel(\n        condition = \"input.analysis_type == 'smoking_obesity'\",\n        selectInput(\"smoking_filter\", \"Filter by Smoking Status:\",\n                    choices = c(\"All\", unique(analysisD_data$Smoking)))\n      )\n    ),\n    mainPanel(\n      tabsetPanel(\n        tabPanel(\"Summary\", tableOutput(\"summary_table\")),\n        tabPanel(\"Plot\", plotOutput(\"main_plot\")),\n        tabPanel(\"Statistical Results\", verbatimTextOutput(\"stat_results\"))\n      )\n    )\n  )\n)\n\n# Define Server\nserver <- function(input, output) {\n  \n  # Reactive filtering of data\n  filtered_data <- reactive({\n    if (input$analysis_type == \"bmi_gender\") {\n      analysisB_data %>% \n        filter(BMI >= input$bmi_range[1], BMI <= input$bmi_range[2])\n    } else if (input$analysis_type == \"race_education\") {\n      if (input$race_filter == \"All\") {\n        analysisE_data\n      } else {\n        analysisE_data %>% filter(Race == input$race_filter)\n      }\n    } else if (input$analysis_type == \"smoking_obesity\") {\n      if (input$smoking_filter == \"All\") {\n        analysisD_data\n      } else {\n        analysisD_data %>% filter(Smoking == input$smoking_filter)\n      }\n    } else {\n      analysisA_data\n    }\n  })\n  \n  # Main Plot\n  output$main_plot <- renderPlot({\n    data <- filtered_data()\n    if (input$analysis_type == \"bp_analysis\") {\n      ggplot(data, aes(x = BPXOSY1, y = BPXOSY2)) +\n        geom_point(alpha = 0.6) +\n        geom_abline(intercept = 0, slope = 1, color = \"red\", linetype = \"dashed\") +\n        labs(title = \"Systolic BP: 1st vs 2nd Readings\",\n             x = \"1st Reading (mmHg)\", y = \"2nd Reading (mmHg)\") +\n        theme(\n        axis.text = element_text(face = \"bold\",size = 10),\n        axis.title.y = element_text(face = \"bold\", size = 10),\n        axis.title.x = element_text(face = \"bold\", size = 10),\n        plot.title = element_text(face = \"bold\", hjust = 0.5, size = 12))\n    } else if (input$analysis_type == \"bmi_gender\") {\n      ggplot(data, aes(x = Gender, y = BMI, fill = Gender)) +\n        geom_boxplot() +\n        coord_flip() +\n        labs(title = \"BMI Distribution by Gender\",\n             x = \"Gender\", y = \"BMI\") +\n        theme(\n        axis.text = element_text(face = \"bold\",size = 10),\n        axis.title.y = element_text(face = \"bold\", size = 10),\n        axis.title.x = element_text(face = \"bold\", size = 10),\n        plot.title = element_text(face = \"bold\", hjust = 0.5, size = 12))\n    } else if (input$analysis_type == \"smoking_obesity\") {\n      ggplot(data, aes(x = Smoking, fill = Obesity)) +\n        geom_bar(position = \"dodge\") +\n        labs(title = \"Smoking vs Obesity\",\n             x = \"Smoking Status\", y = \"Count\") +\n        theme(\n        axis.text = element_text(face = \"bold\",size = 10),\n        axis.title.y = element_text(face = \"bold\", size = 10),\n        axis.title.x = element_text(face = \"bold\", size = 10),\n        plot.title = element_text(face = \"bold\", hjust = 0.5, size = 12))\n    } else if (input$analysis_type == \"race_education\") {\n      ggplot(data, aes(x = Race, fill = Education)) +\n        geom_bar(position = \"dodge\") +\n        labs(title = \"Race vs Education\",\n             x = \"Race/Ethnicity\", y = \"Count\") +\n        theme(\n        axis.text = element_text(face = \"bold\",size = 10),\n        axis.title.y = element_text(face = \"bold\", size = 10),\n        axis.title.x = element_text(face = \"bold\", size = 10),\n        plot.title = element_text(face = \"bold\", hjust = 0.5, size = 12))\n    }\n  })\n  \n  # Summary Table\n  output$summary_table <- renderTable({\n    data <- filtered_data()\n    if (input$analysis_type == \"bp_analysis\") {\n      data %>% \n        summarise(\n          Mean_BP1 = mean(BPXOSY1, na.rm = TRUE),\n          Mean_BP2 = mean(BPXOSY2, na.rm = TRUE),\n          SD_BP1 = sd(BPXOSY1, na.rm = TRUE),\n          SD_BP2 = sd(BPXOSY2, na.rm = TRUE),\n          N = n()\n        )\n    } else if (input$analysis_type == \"bmi_gender\") {\n      data %>% \n        group_by(Gender) %>% \n        summarise(\n          Mean_BMI = mean(BMI, na.rm = TRUE),\n          SD_BMI = sd(BMI, na.rm = TRUE),\n          N = n()\n        )\n    } else if (input$analysis_type == \"smoking_obesity\") {\n      data %>% \n        count(Smoking, Obesity) %>% \n        spread(Obesity, n, fill = 0)\n    } else if (input$analysis_type == \"race_education\") {\n      data %>% \n        count(Race, Education) %>% \n        spread(Education, n, fill = 0)\n    }\n  })\n  \n  # Statistical Results\n  output$stat_results <- renderPrint({\n    data <- filtered_data()\n    if (input$analysis_type == \"bp_analysis\") {\n      # Wilcoxon signed-rank test\n      wilcox.test(data$BPXOSY1, data$BPXOSY2, paired = TRUE)\n    } else if (input$analysis_type == \"bmi_gender\") {\n      # Wilcoxon rank-sum test\n      wilcox.test(BMI ~ Gender, data = data)\n    } else if (input$analysis_type == \"smoking_obesity\") {\n      # Chi-square test\n      chisq.test(table(data$Smoking, data$Obesity))\n    } else if (input$analysis_type == \"race_education\") {\n      # Chi-square test\n      chisq.test(table(data$Race, data$Education))\n    }\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}