---
title: "Interactive Dashboard: Exploring Insights  in Sociodemographic and Health Associations from the NHANES 2017–March 2020 Dataset"
author: "Bosco Bakwatanisa"
date: last-modified
format: 
  html:
    fig-responsive: true
    fig-align: center
    fig-width: 8
    fig-height: 8
    page-layout: full
    sidebar: true
    theme: flatly
    embed-resources: true
    number_sections: true
    date-format: iso
    code-fold: false
    toc: true
    toc-depth: 3
execute:
  echo: true
  warning: false
  message: false
editor: visual
---

# NHANES Interactive Dashboard

This dashboard allows you to interactively explore insights from the NHANES 2017–March 2020 dataset. Use the sidebar controls to customize the analysis and visualize the results.

------------------------------------------------------------------------

```{r setup, include=FALSE}
# Load required packages
library(shiny)
library(forcats)
library(boot)
library(ggplot2)
library(ggpubr)
library(kableExtra)
library(janitor)
library(naniar)
library(datawizard)
library(patchwork)
library(gridExtra)
library(broom.mixed)
library(Epi)
library(vcd)
library(xfun)
library(epitools)
library(tidyverse)
theme_set(theme_light())  
knitr::opts_chunk$set(comment=NA)
library(ggplot2)
# Add other libraries as needed

```

## Sidebar Inputs

```{r}
fluidPage( sidebarLayout( sidebarPanel( selectInput( inputId = "analysis_type", label = "Select Analysis Type:", choices = c("Systolic BP Analysis" = "bp_analysis", "BMI by Gender" = "bmi_gender", "Smoking and Obesity" = "smoking_obesity", "Race vs Education" = "race_education"), selected = "bp_analysis" ), conditionalPanel( condition = "input.analysis_type == 'bmi_gender'", sliderInput("bmi_range", "Filter BMI Range:", min = 10, max = 50, value = c(15, 35)) ), conditionalPanel( condition = "input.analysis_type == 'race_education'", selectInput( "race_filter", "Select Race/Ethnicity:", choices = c("All", "Mexican", "Hispanic", "White", "Black", "Asian"), selected = "All" ) ), conditionalPanel( condition = "input.analysis_type == 'smoking_obesity'", radioButtons( "smoking_filter", "Smoking Status:", choices = c("All", "Smoker", "Non-Smoker"), selected = "All" ) ) ), mainPanel( tabsetPanel( type = "tabs", tabPanel("Visualization", plotOutput("main_plot")), tabPanel("Data Summary", tableOutput("summary_table")) ) ) ) )
```

```{r echo=TRUE, warning=FALSE, message=FALSE}
analysisA_data <- readRDS("data/AnalysisA.rds")
analysisB_data <- readRDS("data/analysisB.rds")
analysisD_data <- readRDS("data/analysisD.rds")
analysisE_data <- readRDS("data/analysisE.rds")

shinyServer(function(input, output) {
  
  # Filter data based on user inputs
  filtered_data <- reactive({
    if (input$analysis_type == "bmi_gender") {
      analysisB_data %>% 
        filter(BMI >= input$bmi_range[1], BMI <= input$bmi_range[2])
    } else if (input$analysis_type == "race_education") {
      if (input$race_filter == "All") {
        analysisE_data
      } else {
        analysisE_data %>% filter(Race == input$race_filter)
      }
    } else if (input$analysis_type == "smoking_obesity") {
      if (input$smoking_filter == "All") {
        analysisD_data
      } else {
        analysisD_data %>% filter(Smoking == input$smoking_filter)
      }
    } else {
      analysisA_data
    }
  })
  
  # Main plot
  output$main_plot <- renderPlot({
    data <- filtered_data()
    if (input$analysis_type == "bp_analysis") {
      ggplot(data, aes(x = BPXOSY1, y = BPXOSY2)) +
        geom_point(alpha = 0.6) +
        geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
        labs(title = "Systolic BP: 1st vs 2nd Readings",
             x = "1st Reading (mmHg)", y = "2nd Reading (mmHg)") +
        theme_minimal()
    } else if (input$analysis_type == "bmi_gender") {
      ggplot(data, aes(x = Gender, y = BMI, fill = Gender)) +
        geom_boxplot() +
        coord_flip() +
        labs(title = "BMI Distribution by Gender",
             x = "Gender", y = "BMI") +
        theme_minimal()
    } else if (input$analysis_type == "smoking_obesity") {
      ggplot(data, aes(x = Smoking, fill = Obesity)) +
        geom_bar(position = "dodge") +
        labs(title = "Smoking vs Obesity",
             x = "Smoking Status", y = "Count") +
        theme_minimal()
    } else if (input$analysis_type == "race_education") {
      ggplot(data, aes(x = Race, fill = Education)) +
        geom_bar(position = "dodge") +
        labs(title = "Race vs Education",
             x = "Race/Ethnicity", y = "Count") +
        theme_minimal()
    }
  })
  
  # Summary table
  output$summary_table <- renderTable({
    data <- filtered_data()
    if (input$analysis_type == "bp_analysis") {
      summary(data)
    } else {
      data %>% 
        group_by(across(everything())) %>% 
        summarise(n = n(), .groups = "drop")
    }
  })
})

```



